import java.util.Scanner;
//Pair class
class Pair<K, V>{
	public K first;
	public V second;
	Pair(K key, V value){
		first = key;
		second = value;
	}
}
//Hash table class
class HashTable{
	Pair<String, Integer>[] table; //hash table array
	int M;						   //hash table size
	Pair<String, Integer> deleted;
	//생성자
	HashTable(int m) {
		table = new Pair[m];
		M = m;
		deleted = new Pair(null, 0);
	}
	//hash값을 얻기 위한 함수
	int hash(String key) {
		int h = key.hashCode() & 0x7fffffff; //음수 방지
		return h%M;
	}
	int hash2(String key) {
		int h = key.hashCode() & 0x7fffffff; //음수 방지
		return h%7 + 1; //7은 M보다 작은 값(소수)
	}
	//key값을 가진 value값을 저장하기 위한 함수
	void put(String key, int value) {
		int h = hash(key), step = hash2(key);
		while(table[h] != null) {
			if(table[h] == deleted) break;
			h = (h+step)%M;
			System.out.println("Collision : "+key);
		}
		table[h] = new Pair(key, value);
	}
	//key 값을 가진 것이 존재하는 경우 값 반환, 
	//그렇지 않으면 null 반환
	Integer get(String key) {
		int h = hash(key), step = hash2(key);
		while(table[h] != null) {
			if(key.equals(table[h].first)) return table[h].second;
			h = (h+step) % M;
		}
		return null;
	}
	//key값을 가진 항목 삭제
	void remove(String key) {
		int h = hash(key), step = hash2(key);
		while(table[h] != null) {
			if(key.equals(table[h].first)) {
				table[h] = deleted;
				return;
			}
			h = (h+step) % M;
		}
	}
	//해당 key가 존재하는지 검사
	boolean contains(String key) {
		int h = hash(key), step = hash2(key);
		while(table[h] != null) {
			if(key.equals(table[h].first)) return true;
			h = (h+step) % M;
		}
		return false;
	}
}
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		HashTable map = new HashTable(13);
		map.put("one", 1);
		map.put("two", 2);
		map.put("three", 3);
		map.put("four", 4);
		map.put("five", 5);
		map.put("six", 6);
		map.put("seven", 7);
		map.put("eight", 8);
		map.put("nine", 9);
		map.put("ten", 10);
		while(true) {
			System.out.print("ht> ");
			String cmd = scan.next();
			if(cmd.equals("quit")) break;
			if(cmd.equals("add")) {
				String key = scan.next();
				int value = scan.nextInt();
				map.put(key, value);
			}
			else if(cmd.equals("find")) {
				String key = scan.next();
				Integer value = map.get(key);
				if(value == null)
					System.out.println(key+" is not found.");
				else
					System.out.println("Value for "+key+" is "+value+".");
			}
			else if(cmd.equals("remove")) {
				String key = scan.next();
				map.remove(key);
			}
		}
	}
}
